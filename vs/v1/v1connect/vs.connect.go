// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vs/v1/vs.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kk-no/proto-terminal/vs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VSServiceName is the fully-qualified name of the VSService service.
	VSServiceName = "vs.v1.VSService"
)

// VSServiceClient is a client for the vs.v1.VSService service.
type VSServiceClient interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
}

// NewVSServiceClient constructs a client for the vs.v1.VSService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVSServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vSServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+"/vs.v1.VSService/Ping",
			opts...,
		),
		listUsers: connect_go.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+"/vs.v1.VSService/ListUsers",
			opts...,
		),
	}
}

// vSServiceClient implements VSServiceClient.
type vSServiceClient struct {
	ping      *connect_go.Client[v1.PingRequest, v1.PingResponse]
	listUsers *connect_go.Client[v1.ListUsersRequest, v1.ListUsersResponse]
}

// Ping calls vs.v1.VSService.Ping.
func (c *vSServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ListUsers calls vs.v1.VSService.ListUsers.
func (c *vSServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// VSServiceHandler is an implementation of the vs.v1.VSService service.
type VSServiceHandler interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
}

// NewVSServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVSServiceHandler(svc VSServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/vs.v1.VSService/Ping", connect_go.NewUnaryHandler(
		"/vs.v1.VSService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/vs.v1.VSService/ListUsers", connect_go.NewUnaryHandler(
		"/vs.v1.VSService/ListUsers",
		svc.ListUsers,
		opts...,
	))
	return "/vs.v1.VSService/", mux
}

// UnimplementedVSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVSServiceHandler struct{}

func (UnimplementedVSServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vs.v1.VSService.Ping is not implemented"))
}

func (UnimplementedVSServiceHandler) ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vs.v1.VSService.ListUsers is not implemented"))
}
